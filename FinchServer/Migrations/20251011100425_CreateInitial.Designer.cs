// <auto-generated />
using System;
using FinchServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinchServer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251011100425_CreateInitial")]
    partial class CreateInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FinchServer.Database.Artist", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("MusicBrainzId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("music_brainz_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_artists");

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("FinchServer.Database.ArtistImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artist_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_name");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("image_type");

                    b.HasKey("Id")
                        .HasName("pk_artist_image");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_artist_image_artist_id");

                    b.ToTable("artist_image", (string)null);
                });

            modelBuilder.Entity("FinchServer.Database.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_playlists");

                    b.ToTable("playlists", (string)null);
                });

            modelBuilder.Entity("FinchServer.Database.PlaylistEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnName("index");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("playlist_id");

                    b.HasKey("Id")
                        .HasName("pk_playlist_entries");

                    b.HasIndex("PlaylistId")
                        .HasDatabaseName("ix_playlist_entries_playlist_id");

                    b.ToTable("playlist_entries", (string)null);
                });

            modelBuilder.Entity("FinchServer.Database.ArtistImage", b =>
                {
                    b.HasOne("FinchServer.Database.Artist", "Artist")
                        .WithMany("Images")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_artist_image_artists_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FinchServer.Database.PlaylistEntry", b =>
                {
                    b.HasOne("FinchServer.Database.Playlist", "Playlist")
                        .WithMany("Entries")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlist_entries_playlists_playlist_id");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("FinchServer.Database.Artist", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("FinchServer.Database.Playlist", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
