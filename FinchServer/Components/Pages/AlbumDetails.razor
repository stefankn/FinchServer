@page "/albums/{albumid:int}"

@using FinchServer.Beets
@using FinchServer.Components.Modals
@using FinchServer.Database
@using FinchServer.Metadata
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<BeetsContext> BeetsDbContextFactory
@inject IDbContextFactory<DataContext> DbContextFactory
@inject IMetadataManager MetadataManager

@if (_album != null) {
    <div class="flex flex-col gap-6">
        <div class="breadcrumbs text-sm">
            <ul>
                <li class="font-semibold"><NavLink href="/albums">Albums</NavLink></li>
                <li>@_album.AlbumArtist - @_album.Title</li>
            </ul>
        </div>
        
        <div class="card lg:card-side bg-base-100 shadow-sm">
            <figure class="size-48 bg-base-200">
                <img src="@($"/api/v1/albums/{_album.Id}/artwork/thumbnail")" alt="@($"{_album.AlbumArtist} - {_album.Title}")" />
            </figure>
            <div class="card-body">
                <div class="flex justify-between items-start">
                    <h2 class="card-title">@_album.Title</h2>
                </div>
                <div class="text-3xl font-bold">@_album.AlbumArtist</div>
                
                <div class="flex flex-col gap-1 text-sm text-base-content/50">
                    <div>
                        @_album.Year • @_album.Items?.FirstOrDefault()?.Format • @_album.CatalogNumber
                    </div>
                    <div>
                        @_album.Genre • @_album.Style
                    </div>
                </div>
            </div>
        </div>
        
        @foreach (var disc in Enumerable.Range(1, _album.DiscCount)) {
            <div class="flex flex-col gap-6">
                <div class="font-semibold">Disc @disc</div>
                
                <table class="table table-zebra">
                    <thead>
                    <tr>
                        <th>Track</th>
                        <th>Artist</th>
                        <th>Title</th>
                        <th>Discogs artist id</th>
                        <th>Duration</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in (_album.Items ?? []).Where(i => i.Disc == disc).OrderBy(i => i.Track)) {
                        <tr>
                            <td>@item.Track</td>
                            <td>@item.Artist</td>
                            <td>@item.Title</td>
                            <td>@item.DiscogsArtistId</td>
                            <td>@item.DurationDescription</td>
                            <td class="text-right">
                                <a class="btn btn-sm btn-square" target="_blank" href="https://www.discogs.com/search/?q=@(item.Artist.Replace(" ", "+"))&type=artist">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"/>
                                    </svg>
                                </a>
                                <button disabled="@(item.DiscogsArtistId == 0 || _isFetchingArtist)" class="btn btn-sm btn-square" @onclick="() => FetchArtistInfo(item)">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15M9 12l3 3m0 0 3-3m-3 3V2.25" />
                                    </svg>
                                </button>
                                <button class="btn btn-sm btn-square" @onclick="() => _editingItem = item">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125"/>
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </div>
}

<EditItemModal @bind-Item="_editingItem" OnItemUpdate="Update"></EditItemModal>

@code {

    // - Properties
    
    [Parameter, EditorRequired]
    public required int AlbumId { get; set; }
    
    
    // - Private Properties

    private Album? _album;
    private bool _isFetchingArtist;
    private Item? _editingItem;
    
    
    // - Functions

    protected override async Task OnInitializedAsync() {
        if (!RendererInfo.IsInteractive) return;

        await Update();
    }
    
    
    // - Private Functions

    private async Task Update() {
        await using var context = await  BeetsDbContextFactory.CreateDbContextAsync();
        _album = await context.Albums.Include(a => a.Items).FirstOrDefaultAsync(a => a.Id == AlbumId);

        await InvokeAsync(StateHasChanged);
    }
    
    private async Task FetchArtistInfo(Item item) {
        if (item.DiscogsArtistId == null) return;

        _isFetchingArtist = true;
        await InvokeAsync(StateHasChanged);
        
        await using var context = await DbContextFactory.CreateDbContextAsync();
        
        var artist = await context.Artists
            .Include(a => a.Images)
            .FirstOrDefaultAsync(a => a.Id == item.DiscogsArtistId.Value);

        if (artist == null) {
            var artistMetadata = await MetadataManager.FetchArtistMetaData(item.DiscogsArtistId.Value);
            if (artistMetadata != null) {
                artist = new Artist {
                    Id = artistMetadata.Id,
                    MusicBrainzId = artistMetadata.MusicBrainzId,
                    Name = artistMetadata.Name,
                    Images = new List<ArtistImage>(),
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now,
                };
            
                foreach (var artwork in artistMetadata.LocalArtworks) {
                    artist.Images.Add(new ArtistImage { FileName = artwork.FileName, ImageType = artwork.Type });
                }
            
                context.Artists.Add(artist);
                await context.SaveChangesAsync();
            }
        }
        
        _isFetchingArtist = false;
        await InvokeAsync(StateHasChanged);
    }
}
